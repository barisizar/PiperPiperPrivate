{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\MERTL\\\\PiperPiperPrivate\\\\src\\\\screens\\\\LoadingScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Spinner from 'react-native-loading-spinner-overlay';\nexport var LoadingScreen = function (_Component) {\n  _inherits(LoadingScreen, _Component);\n\n  var _super = _createSuper(LoadingScreen);\n\n  function LoadingScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoadingScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      spinner: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadingScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setInterval(function () {\n        _this2.setState({\n          spinner: !_this2.state.spinner\n        });\n      }, 3000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Spinner, {\n        visible: this.state.spinner,\n        textContent: 'Loading...',\n        textStyle: styles.spinnerTextStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return LoadingScreen;\n}(Component);\nvar styles = StyleSheet.create({\n  spinnerTextStyle: {\n    color: '#FFF'\n  }\n});\nexport default LoadingScreen;","map":{"version":3,"sources":["C:/Users/MERTL/PiperPiperPrivate/src/screens/LoadingScreen.js"],"names":["StatusBar","React","Component","Spinner","LoadingScreen","props","state","spinner","setInterval","setState","styles","spinnerTextStyle","StyleSheet","create","color"],"mappings":";;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;;;;AAEA,OAAOC,OAAP,MAAoB,sCAApB;AAEA,WAAaC,aAAb;AAAA;;AAAA;;AACI,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACbC,MAAAA,OAAO,EAAE;AADI,KAAb;AAFe;AAKlB;;AANL;AAAA;AAAA,wCAO0B;AAAA;;AAClBC,MAAAA,WAAW,CAAC,YAAM;AAChB,QAAA,MAAI,CAACC,QAAL,CAAc;AACZF,UAAAA,OAAO,EAAE,CAAC,MAAI,CAACD,KAAL,CAAWC;AADT,SAAd;AAGD,OAJU,EAIR,IAJQ,CAAX;AAKD;AAbP;AAAA;AAAA,6BAca;AACL,aACI,oBAAC,OAAD;AACA,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OADpB;AAEA,QAAA,WAAW,EAAE,YAFb;AAGA,QAAA,SAAS,EAAEG,MAAM,CAACC,gBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOD;AAtBP;;AAAA;AAAA,EAAmCT,SAAnC;AAyBA,IAAMQ,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,gBAAgB,EAAE;AAChBG,IAAAA,KAAK,EAAE;AADS;AADW,CAAlB,CAAf;AAOA,eAAeV,aAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, {Component} from 'react';\r\nimport { StyleSheet, Text, View, Image, TextInput, TouchableOpacity} from 'react-native';\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\n\r\nexport class LoadingScreen extends Component  {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        spinner: false\r\n      };\r\n    }\r\n      componentDidMount() {\r\n        setInterval(() => {\r\n          this.setState({\r\n            spinner: !this.state.spinner\r\n          });\r\n        }, 3000);\r\n      }\r\n    render() {\r\n        return (\r\n            <Spinner\r\n            visible={this.state.spinner}\r\n            textContent={'Loading...'}\r\n            textStyle={styles.spinnerTextStyle}\r\n          />\r\n        );\r\n      }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    spinnerTextStyle: {\r\n      color: '#FFF'\r\n    },\r\n});\r\n\r\n\r\nexport default LoadingScreen;\r\n"]},"metadata":{},"sourceType":"module"}