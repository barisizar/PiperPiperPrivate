{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/barisizar/Desktop/ReactNative/PiedPiper1/piper/PiperPiperPrivate/src/screens/Main/Navigation.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport MainPage from \"./MainPage\";\nimport Chats from \"./Chats\";\nimport Profile from \"./Profile\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUser, clearData } from \"../redux/actions/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport Icon2 from '@expo/vector-icons/Entypo';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nvar EmptyScreen = function EmptyScreen() {\n  return null;\n};\n\nvar Tab = createMaterialTopTabNavigator();\nexport var BottomTabNavigator = function (_Component) {\n  _inherits(BottomTabNavigator, _Component);\n\n  var _super = _createSuper(BottomTabNavigator);\n\n  function BottomTabNavigator() {\n    _classCallCheck(this, BottomTabNavigator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BottomTabNavigator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.clearData();\n      this.props.fetchUser();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tab.Navigator, {\n        initialRouteName: \"MainPage\",\n        labeled: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"MainPage\",\n        component: MainPage,\n        listeners: function listeners(_ref) {\n          var navigation = _ref.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"MainPage\");\n            }\n          };\n        },\n        options: {\n          tabBarLabel: 'Main'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Chats\",\n        component: Chats,\n        listeners: function listeners(_ref2) {\n          var navigation = _ref2.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"Chats\");\n            }\n          };\n        },\n        options: {\n          tabBarLabel: 'Chats'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Profile\",\n        component: Profile,\n        listeners: function listeners(_ref3) {\n          var navigation = _ref3.navigation;\n          return {\n            tabPress: function tabPress(event) {\n              event.preventDefault();\n              navigation.navigate(\"Profile\", {\n                uid: firebase.auth().currentUser.uid\n              });\n            }\n          };\n        },\n        options: {\n          tabBarLabel: 'Profile'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return BottomTabNavigator;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    currentUser: store.userState.currentUser\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUser: fetchUser,\n    clearData: clearData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(BottomTabNavigator);","map":{"version":3,"sources":["/Users/barisizar/Desktop/ReactNative/PiedPiper1/piper/PiperPiperPrivate/src/screens/Main/Navigation.js"],"names":["React","Component","MainPage","Chats","Profile","connect","bindActionCreators","fetchUser","clearData","firebase","require","Icon","Icon2","createMaterialTopTabNavigator","EmptyScreen","Tab","BottomTabNavigator","props","navigation","tabPress","event","preventDefault","navigate","tabBarLabel","uid","auth","currentUser","mapStateToProps","store","userState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport MainPage from './MainPage'\nimport Chats from './Chats';\nimport Profile from './Profile';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchUser, clearData } from '../redux/actions/index'; \nimport firebase from 'firebase'\nrequire('firebase/firestore')\nimport Icon from 'react-native-vector-icons/Ionicons';\nimport Icon2 from '@expo/vector-icons/Entypo';\n\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nconst EmptyScreen = () => {\n    return (null)\n}\n\nconst Tab = createMaterialTopTabNavigator();\nexport class BottomTabNavigator extends Component {\n    componentDidMount() {\n        this.props.clearData();\n        this.props.fetchUser();\n    }\n    render(){\n    return (\n        <Tab.Navigator initialRouteName=\"MainPage\" labeled={false}>\n                <Tab.Screen name=\"MainPage\" component={MainPage}\n                listeners={({ navigation }) => ({\n                    tabPress: event => {\n                        event.preventDefault();\n                        navigation.navigate(\"MainPage\")\n                    }\n                })}\n                    options={{\n                        tabBarLabel:'Main',\n                    }} />\n                <Tab.Screen name=\"Chats\" component={Chats}\n                    listeners={({ navigation }) => ({\n                        tabPress: event => {\n                            event.preventDefault();\n                            navigation.navigate(\"Chats\")\n                        }\n                    })}\n                    options={{\n                        tabBarLabel:'Chats',\n                    }} />\n                <Tab.Screen name=\"Profile\" component={Profile} \n                listeners={({ navigation }) => ({\n                    tabPress: event => {\n                        event.preventDefault();\n                        navigation.navigate(\"Profile\", {uid: firebase.auth().currentUser.uid})\n                    }})}\n                    options={{\n                        tabBarLabel:'Profile',\n                    }} />\n            </Tab.Navigator>\n        // <Tab.Navigator \n        //     tabBarOptions={{\n        //         activeTintColor:'#f2404c',\n        //         inactiveTintColor:'#000119',\n        //         style:{\n        //             height:95,\n        //             justifyContent:'center',\n        //             paddingVertical:33,\n        //             backgroundColor:'#FFF',\n        //             elevation:2\n        //         }\n        //     }}\n        // >\n        //         <Tab.Screen\n        //             name='MainPage'\n        //             component={MainPage}\n        //             navigation={this.props.navigation}\n        //             options={{\n        //                 tabBarLabel:'Main',\n        //                 // tabBarIcon:({color,size})=>(\n        //                 //     <Icon name=\"copy-outline\" size={30} color={color} />\n                            \n        //                 // )\n        //             }}\n        //         />\n        //          <Tab.Screen\n        //             name='Chats'\n        //             component={Chats}\n        //             navigation={this.props.navigation}\n        //             options={{\n        //                 tabBarLabel:'Chats',\n        //                 // tabBarIcon:({color,size})=>(\n        //                 //     <Icon2 name='chat' color={color} size={30}/>\n                            \n        //                 // )\n        //             }}\n        //         />\n        //          <Tab.Screen\n        //             name='Profile'\n        //             component={Profile}\n        //             navigation={this.props.navigation}\n        //             options={{\n        //                 tabBarLabel:'Profile',\n        //                 // tabBarIcon:({color,size})=>(\n        //                 //     <Icon name='ios-person' color={color} size={30}/>\n                            \n        //                 // )\n        //             }}\n        //         />\n        // </Tab.Navigator>\n    );\n};\n}\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser\n})\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUser, clearData }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(BottomTabNavigator);"]},"metadata":{},"sourceType":"module"}